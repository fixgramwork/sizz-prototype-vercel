CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
    ID UUID DEFAULT GEN_RANDOM_UUID() PRIMARY KEY,
    CLERK_ID TEXT NOT NULL UNIQUE,
    NICKNAME TEXT,
    PREFERENCES JSONB DEFAULT '{"notifications": {"email": true, "push": true}, "theme": "system"}'::JSONB,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Enable RLS
ALTER TABLE PUBLIC.USERS ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own data"
    ON PUBLIC.USERS FOR SELECT
    USING (AUTH.UID()::TEXT = CLERK_ID);

CREATE POLICY "Users can update their own data"
    ON PUBLIC.USERS FOR UPDATE
    USING (AUTH.UID()::TEXT = CLERK_ID);

-- Create function to handle updated_at
CREATE OR REPLACE FUNCTION PUBLIC.HANDLE_UPDATED_AT(
) RETURNS TRIGGER AS
    $$     BEGIN NEW.UPDATED_AT = TIMEZONE('utc'::TEXT, NOW());
    RETURN NEW;
END;
$$     LANGUAGE PLPGSQL;
 
-- Create trigger for updated_at
CREATE TRIGGER HANDLE_UPDATED_AT BEFORE UPDATE ON PUBLIC.USERS FOR EACH ROW EXECUTE

FUNCTION PUBLIC.HANDLE_UPDATED_AT(
);