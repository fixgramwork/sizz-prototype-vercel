-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create users table
CREATE TABLE IF NOT EXISTS USERS (
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    CLERK_ID TEXT UNIQUE NOT NULL,
    NICKNAME TEXT,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create articles table
CREATE TABLE IF NOT EXISTS ARTICLES (
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    TITLE TEXT NOT NULL,
    CONTENT TEXT NOT NULL,
    SOURCE TEXT NOT NULL,
    SOURCE_URL TEXT,
    CATEGORY TEXT NOT NULL,
    BIAS TEXT NOT NULL CHECK (BIAS IN ('left', 'center', 'right')),
    SUMMARY TEXT,
    PUBLISHED_AT TIMESTAMP WITH TIME ZONE,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create votes table
CREATE TABLE IF NOT EXISTS VOTES (
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    USER_ID UUID NOT NULL REFERENCES USERS(ID) ON DELETE CASCADE,
    ARTICLE_ID UUID NOT NULL REFERENCES ARTICLES(ID) ON DELETE CASCADE,
    VOTE_TYPE BOOLEAN NOT NULL, -- true for agree, false for disagree
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(USER_ID, ARTICLE_ID)
);

-- Create article_pairs table for matching opposite bias articles
CREATE TABLE IF NOT EXISTS ARTICLE_PAIRS (
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    ARTICLE1_ID UUID NOT NULL REFERENCES ARTICLES(ID) ON DELETE CASCADE,
    ARTICLE2_ID UUID NOT NULL REFERENCES ARTICLES(ID) ON DELETE CASCADE,
    SIMILARITY_SCORE FLOAT,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(ARTICLE1_ID, ARTICLE2_ID)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS IDX_ARTICLES_CATEGORY ON ARTICLES(CATEGORY);

CREATE INDEX IF NOT EXISTS IDX_ARTICLES_BIAS ON ARTICLES(BIAS);

CREATE INDEX IF NOT EXISTS IDX_VOTES_USER_ID ON VOTES(USER_ID);

CREATE INDEX IF NOT EXISTS IDX_VOTES_ARTICLE_ID ON VOTES(ARTICLE_ID);

CREATE INDEX IF NOT EXISTS IDX_ARTICLE_PAIRS_ARTICLES ON ARTICLE_PAIRS(ARTICLE1_ID, ARTICLE2_ID);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION UPDATE_UPDATED_AT_COLUMN(
) RETURNS TRIGGER AS
    $$     BEGIN NEW.UPDATED_AT = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$     LANGUAGE 'plpgsql';
 
-- Create triggers for updated_at
CREATE TRIGGER UPDATE_USERS_UPDATED_AT BEFORE UPDATE ON USERS FOR EACH ROW EXECUTE

FUNCTION UPDATE_UPDATED_AT_COLUMN(
);
CREATE TRIGGER UPDATE_ARTICLES_UPDATED_AT BEFORE UPDATE ON ARTICLES FOR EACH ROW EXECUTE

FUNCTION UPDATE_UPDATED_AT_COLUMN(
);